define pred = fun (n : Nat) -> Ind (fun (x : Nat) -> Nat) Z (fun (k : Nat) -> fun (z : Nat) -> k) n
define add = fun (n : Nat) â†’ fun (m : Nat) â†’ Ind (fun (d : Nat) -> Nat) n (fun (k : Nat) -> fun (d : Nat) -> S d) m
eval pred Z
eval pred (S (S (S Z)))
eval add (S (S (S Z))) (S (S Z))
define Seq = fun (x : Nat) -> fun (y : Nat) -> fun (e : x = y) -> J (fun (x : Nat) -> fun (y : Nat) -> fun (e : x = y) -> S x = S y) (fun (x : Nat) -> ((fun (x : Nat) -> fun (y : Nat) -> fun (e : x = y) -> S x = S y)) x x (Refl x)) x y e
check Seq = Pi (x : Nat) -> Pi (y : Nat) -> Pi (e : x = y) -> S x = S y
define addz = fun (n : Nat) -> Refl (add n Z)
check addz = Pi (n : Nat) -> add n Z = n